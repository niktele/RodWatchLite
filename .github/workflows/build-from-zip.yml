name: Build from ZIP (LITE)

on:
  workflow_dispatch:
  push:
    paths:
      - 'RoadWatch_MapLibre_Lite.zip'
      - '.github/workflows/build-from-zip.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      ZIP_NAME: RoadWatch_MapLibre_Lite.zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Samo postavi SDK i prihvati licence (NE instaliramo pakete ovde)
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      # Instalacija paketa direktno preko sdkmanager (stabilno)
      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          SDKM="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          echo "Using sdkmanager at: $SDKM"
          yes | "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --licenses
          yes | "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      - name: Unzip project
        run: |
          test -f "$ZIP_NAME" || { echo "::error::ZIP '$ZIP_NAME' not found at repo root"; exit 1; }
          unzip -o -q "$ZIP_NAME" -d .

      - name: Locate Gradle project dir
        id: loc
        shell: bash
        run: |
          set -euo pipefail
          DIR=$(find . -maxdepth 3 -type f \( -name settings.gradle -o -name settings.gradle.kts \) -printf '%h\n' | head -n1 || true)
          if [[ -z "${DIR}" ]]; then
            echo "::error::Cannot find settings.gradle(.kts) after unzip."
            find . -maxdepth 3 -type f -name "*.gradle*" -printf "%p\n" || true
            exit 1
          fi
          echo "dir=${DIR}" >> "$GITHUB_OUTPUT"
          echo "Project dir: ${DIR}"

      - name: Detect AGP and pick Gradle
        id: pick
        shell: bash
        working-directory: ${{ steps.loc.outputs.dir }}
        run: |
          set -euo pipefail
          AGP_GAV=$(grep -Rho --include=\*gradle\* "com\.android\.tools\.build:gradle:[0-9.]\+" . | head -n1 || true)
          AGP_PLUG=$(grep -Rho --include=\*gradle\* "id ['\"]com\.android\.[a-zA-Z]\+['\"][[:space:]]*version ['\"][0-9.]\+['\"]" . | head -n1 || true)
          if [[ -n "${AGP_GAV}" ]]; then
            VER=$(sed -E 's/.*gradle:([0-9.]+).*/\1/' <<<"${AGP_GAV}")
          elif [[ -n "${AGP_PLUG}" ]]; then
            VER=$(sed -E "s/.*version ['\"]([0-9.]+)['\"].*/\1/" <<<"${AGP_PLUG}")
          else
            VER=""
          fi
          echo "AGP detected: ${VER:-none}"
          GV=8.7
          if [[ "$VER" == 8.1.* ]]; then GV=8.2; fi
          if [[ "$VER" == 8.2.* ]]; then GV=8.3; fi
          if [[ "$VER" == 8.3.* ]]; then GV=8.4; fi
          if [[ "$VER" == 8.4.* ]]; then GV=8.6; fi
          if [[ "$VER" == 7.*   ]]; then GV=7.6.4; fi
          echo "gradle=$GV" >> "$GITHUB_OUTPUT"

      - name: Ensure Gradle wrapper (generate if missing)
        shell: bash
        working-directory: ${{ steps.loc.outputs.dir }}
        run: |
          set -euo pipefail
          if [[ -x "./gradlew" ]]; then
            echo "Gradle wrapper already present."
          else
            GV="${{ steps.pick.outputs.gradle }}"
            echo "No wrapper â€“ generating with Gradle $GV"
            curl -sL "https://services.gradle.org/distributions/gradle-${GV}-bin.zip" -o "$RUNNER_TEMP/gradle.zip"
            unzip -q "$RUNNER_TEMP/gradle.zip" -d "$RUNNER_TEMP"
            GRADLE_HOME=$(find "$RUNNER_TEMP" -maxdepth 1 -type d -name "gradle-${GV}" | head -n1)
            "$GRADLE_HOME/bin/gradle" wrapper --gradle-version "${GV}" --distribution-type bin
          fi
          chmod +x ./gradlew

      - name: Setup Gradle (cache & summary)
        uses: gradle/actions/setup-gradle@v3
        with:
