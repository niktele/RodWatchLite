name: Build from ZIP (LITE)

on:
  workflow_dispatch:
  push:
    paths:
      - RoadWatch_MapLibre_Lite.zip
      - .github/workflows/build-from-zip.yml

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      ZIP_NAME: RoadWatch_MapLibre_Lite.zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      # Postavi Android SDK i prihvati licence (bez paketa ovde)
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      # Instaliraj SDK pakete (svaki posebno, bez viÅ¡erednih argumenata)
      - name: Install Android packages
        shell: bash
        run: |
          set -euxo pipefail
          SDKM="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --licenses
          yes | "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --install "platform-tools"
          yes | "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --install "platforms;android-34"
          yes | "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --install "build-tools;34.0.0"

      - name: Unzip project
        run: unzip -o -q "$ZIP_NAME" -d .

      - name: Find project dir
        id: loc
        shell: bash
        run: |
          set -euo pipefail
          dir=$(find . -maxdepth 3 -type f \( -name settings.gradle -o -name settings.gradle.kts \) -printf '%h\n' | head -n1 || true)
          if [ -z "$dir" ]; then
            echo "::error::settings.gradle(.kts) not found after unzip"
            exit 1
          fi
          echo "dir=$dir" >> "$GITHUB_OUTPUT"
          echo "Project dir: $dir"

      # Detektuj AGP i izaberi kompatibilan Gradle (ako wrapper fali)
      - name: Pick Gradle for AGP
        id: pick
        shell: bash
        working-directory: ${{ steps.loc.outputs.dir }}
        run: |
          set -euo pipefail
          AGP_GAV=$(grep -Rho --include=\*gradle\* "com\.android\.tools\.build:gradle:[0-9.]\+" . | head -n1 || true)
          AGP_PLUG=$(grep -Rho --include=\*gradle\* "id ['\"]com\.android\.[a-zA-Z]\+['\"][[:space:]]*version ['\"][0-9.]\+['\"]" . | head -n1 || true)
          if [[ -n "${AGP_GAV}" ]]; then
            VER=$(sed -E 's/.*gradle:([0-9.]+).*/\1/' <<<"${AGP_GAV}")
          elif [[ -n "${AGP_PLUG}" ]]; then
            VER=$(sed -E "s/.*version ['\"]([0-9.]+)['\"].*/\1/" <<<"${AGP_PLUG}")
          else
            VER=""
          fi
          echo "AGP: ${VER:-unknown}"
          GV=8.7
          if [[ "$VER" == 8.5.* ]]; then GV=8.7; fi
          if [[ "$VER" == 8.4.* ]]; then GV=8.6; fi
          if [[ "$VER" == 8.3.* ]]; then GV=8.4; fi
          if [[ "$VER" == 8.2.* ]]; then GV=8.3; fi
          if [[ "$VER" == 8.1.* ]]; then GV=8.2; fi
          if [[ "$VER" == 7.*   ]]; then GV=7.6.4; fi
          echo "gradle=$GV" >> "$GITHUB_OUTPUT"
          echo "Chosen Gradle: $GV"

      - name: Ensure Gradle wrapper
        shell: bash
        working-directory: ${{ steps.loc.outputs.dir }}
        run: |
          set -euxo pipefail
          if [ ! -x ./gradlew ]; then
            GV="${{ steps.pick.outputs.gradle }}"
            curl -sL "https://services.gradle.org/distributions/gradle-${GV}-bin.zip" -o "$RUNNER_TEMP/gradle.zip"
            unzip -q "$RUNNER_TEMP/gradle.zip" -d "$RUNNER_TEMP"
            "$RUNNER_TEMP/gradle-${GV}/bin/gradle" wrapper --gradle-version "${GV}" --distribution-type bin
          fi
          chmod +x ./gradlew

      - name: Build (Debug + Release)
        shell: bash
        working-directory: ${{ steps.loc.outputs.dir }}
        run: ./gradlew --no-daemon --stacktrace clean assembleDebug assembleRelease

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: |
            ${{ steps.loc.outputs.dir }}/**/build/outputs/apk/debug/*.apk
            ${{ steps.loc.outputs.dir }}/**/build/outputs/apk/release/*.apk
          if-no-files-found: warn
          compression-level: 0
