name: Build from ZIP (LITE)

on:
  workflow_dispatch:
    inputs:
      zip_path:
        description: 'Relativna putanja do ZIP fajla'
        required: false
        default: 'RoadWatch_MapLibre_Lite.zip'
  push:
    paths:
      - 'RoadWatch_MapLibre_Lite.zip'
      - '.github/workflows/build-from-zip.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve ZIP path
        id: zip
        shell: bash
        run: |
          set -euo pipefail
          ZIP_INPUT="${{ github.event.inputs.zip_path }}"
          if [[ -z "${ZIP_INPUT:-}" ]]; then ZIP_INPUT='RoadWatch_MapLibre_Lite.zip'; fi
          [[ -f "$ZIP_INPUT" ]] || { echo "::error::ZIP ne postoji: $ZIP_INPUT"; exit 1; }
          echo "zip=$ZIP_INPUT" >> "$GITHUB_OUTPUT"
          echo "Koristim ZIP: $ZIP_INPUT"

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      - name: Unzip project
        shell: bash
        run: unzip -o -q "${{ steps.zip.outputs.zip }}" -d "$GITHUB_WORKSPACE/extracted"

      - name: Locate project root
        id: proj
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE/extracted"

          # 1) Probaj settings.gradle / settings.gradle.kts
          ROOT_FILE=$(grep -RIl -m1 --include=settings.gradle --include=settings.gradle.kts . || true)
          if [[ -n "${ROOT_FILE:-}" ]]; then
            ROOT_DIR=$(dirname "$ROOT_FILE")
          else
            # 2) Ako postoji gradlew, uzmi njegov dir
            GRADLEW=$(find . -type f -name gradlew -print -quit || true)
            if [[ -n "${GRADLEW:-}" ]]; then
              ROOT_DIR=$(dirname "$GRADLEW")
            else
              # 3) Nađi prvi modul koji koristi com.android.application
              MOD=$(grep -RIl --include=build.gradle --include=build.gradle.kts "com\.android\.application" . | head -n1 || true)
              if [[ -n "${MOD:-}" ]]; then
                ROOT_DIR=$(dirname "$MOD")
              else
                echo "::group::Sadržaj ZIP-a (do 2 nivoa)"
                ls -la
                echo "----"
                find . -maxdepth 2 -type f | sed 's|^\./||'
                echo "::endgroup::"
                echo "::error::Nije nađen settings.gradle/settings.gradle.kts, gradlew, ni modul sa com.android.application."
                exit 1
              fi
            fi
          fi

          ROOT_ABS="$GITHUB_WORKSPACE/extracted/${ROOT_DIR#./}"
          echo "dir=$ROOT_ABS" >> "$GITHUB_OUTPUT"
          echo "Root: $ROOT_ABS"

      - name: Detect compileSdk / buildTools / ndk
        id: android
        shell: bash
        working-directory: ${{ steps.proj.outputs.dir }}
        run: |
          set -euo pipefail
          CSK=$(grep -Rho --include=\*.gradle\* "compileSdk\s*=\s*[0-9]\+" . | sed -E 's/.*=\s*([0-9]+)/\1/' | head -n1 || true)
          [[ -n "$CSK" ]] || CSK=$(grep -Rho --include=\*.gradle\* "compileSdkVersion\s+[0-9]\+" . | sed -E 's/.*\s([0-9]+)/\1/' | head -n1 || true)
          [[ -n "$CSK" ]] || CSK=34

          BTV=$(grep -Rho --include=\*.gradle\* "buildToolsVersion\s+['\"][0-9.]+['\"]" . | sed -E "s/.*['\"]([0-9.]+)['\"].*/\1/" | head -n1 || true)
          [[ -n "$BTV" ]] || BTV=34.0.0

          NDK=$(grep -Rho --include=\*.gradle\* "ndkVersion\s+['\"][0-9a-zA-Z\.\-]+['\"]" . | sed -E "s/.*['\"]([0-9a-zA-Z\.\-]+)['\"].*/\1/" | head -n1 || true)

          echo "compileSdk=$CSK" >> "$GITHUB_OUTPUT"
          echo "buildTools=$BTV" >> "$GITHUB_OUTPUT"
          echo "ndk=$NDK" >> "$GITHUB_OUTPUT"
          echo "Detected: compileSdk=$CSK, buildTools=$BTV, ndk=${NDK:-(none)}"

      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          yes | sdkmanager --licenses || true
          sdkmanager --install "platform-tools" "platforms;android-${{ steps.android.outputs.compileSdk }}" "build-tools;${{ steps.android.outputs.buildTools }}"
          if [[ -n "${{ steps.android.outputs.ndk }}" ]]; then
            sdkmanager --install "ndk;${{ steps.android.outputs.ndk }}" || true
          fi

      - name: Ensure Gradle wrapper
        shell: bash
        working-directory: ${{ steps.proj.outputs.dir }}
        run: |
          set -euo pipefail
          if [[ ! -x ./gradlew ]]; then
            echo "gradlew nije nađen → generišem wrapper (Gradle 8.7)"
            cd "$RUNNER_TEMP"
            curl -sL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o gradle.zip
            unzip -q gradle.zip
            export PATH="$RUNNER_TEMP/gradle-8.7/bin:$PATH"
            cd "${{ steps.proj.outputs.dir }}"
            gradle wrapper --gradle-version 8.7
            chmod +x gradlew
          else
            chmod +x gradlew
          fi
          ./gradlew --version

      - name: Build Debug
        shell: bash
        working-directory: ${{ steps.proj.outputs.dir }}
        run: ./gradlew assembleDebug --no-daemon --stacktrace

      - name: (Optional) Build Release
        shell: bash
        working-directory: ${{ steps.proj.outputs.dir }}
        run: ./gradlew assembleRelease --no-daemon --stacktrace || true

      - name: Collect APK/AAB
        id: collect
        shell: bash
        working-directory: ${{ steps.proj.outputs.dir }}
        run: |
          set -euo pipefail
          mkdir -p "$GITHUB_WORKSPACE/_artifacts"
          shopt -s globstar nullglob
          found=0
          for f in **/build/outputs/apk/**/*.apk **/build/outputs/bundle/**/*.aab; do
            echo "Found: $f"
            cp "$f" "$GITHUB_WORKSPACE/_artifacts/"
            found=1
          done
          if [[ $found -eq 0 ]]; then
            echo "::error::Nisu nađeni APK/AAB fajlovi."
            find . -maxdepth 4 -type f -path "*/build/outputs/*" | sed 's|^\./||' || true
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: _artifacts/*
          if-no-files-found: error
