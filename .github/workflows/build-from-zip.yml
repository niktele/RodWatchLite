name: Build from ZIP (LITE)

on:
  workflow_dispatch:
  push:
    paths:
      - 'RoadWatch_MapLibre_Lite.zip'
      - '.github/workflows/build-from-zip.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK (accept licenses)
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      - name: Unzip project
        run: unzip -o -q RoadWatch_MapLibre_Lite.zip -d src

      - name: Locate project root
        id: root
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$(find src -maxdepth 8 -type f \( -name 'settings.gradle' -o -name 'settings.gradle.kts' \) -print -quit)"
          if [[ -z "$ROOT" ]]; then
            ROOT="$(find src -maxdepth 8 -type f \( -name 'build.gradle' -o -name 'build.gradle.kts' \) -print -quit)"
          fi
          [[ -n "$ROOT" ]] || { echo "Nisam našao Gradle fajlove u ZIP-u"; exit 1; }
          DIR="$(dirname "$ROOT")"
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Project root: $DIR"

      - name: Detect AGP → pick Gradle
        id: pick
        shell: bash
        working-directory: ${{ steps.root.outputs.dir }}
        run: |
          set -euo pipefail
          AGP_GAV=$(grep -Rho --include=\*gradle\* "com\.android\.tools\.build:gradle:[0-9.]\+" . | head -n1 || true)
          AGP_PLUG=$(grep -Rho --include=\*gradle\* "id ['\"]com\.android\.[a-zA-Z]\+['\"][[:space:]]*version ['\"][0-9.]\+['\"]" . | head -n1 || true)
          if [[ -n "${AGP_GAV}" ]]; then
            VER=$(sed -E 's/.*gradle:([0-9.]+).*/\1/' <<<"${AGP_GAV}")
          elif [[ -n "${AGP_PLUG}" ]]; then
            VER=$(sed -E "s/.*version ['\"]([0-9.]+)['\"].*/\1/" <<<"${AGP_PLUG}")
          else
            VER=""
          fi
          echo "AGP detected: ${VER:-none}"
          GV=8.4
          if [[ "$VER" == 8.1.* ]]; then GV=8.2; fi
          if [[ "$VER" == 8.2.* ]]; then GV=8.3; fi
          if [[ "$VER" == 8.3.* ]]; then GV=8.4; fi
          if [[ "$VER" == 8.4.* ]]; then GV=8.6; fi
          if [[ "$VER" == 8.5.* ]]; then GV=8.7; fi
          echo "gradle=$GV" >> "$GITHUB_OUTPUT"
          echo "Will use Gradle $GV"

      - name: Ensure Gradle wrapper
        id: wrap
        shell: bash
        working-directory: ${{ steps.root.outputs.dir }}
        run: |
          set -euo pipefail
          if [[ -x "./gradlew" ]]; then
            echo "gradlew=./gradlew" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          TMP="$RUNNER_TEMP/gradle-${{ steps.pick.outputs.gradle }}"; mkdir -p "$TMP"
          curl -sSL "https://services.gradle.org/distributions/gradle-${{ steps.pick.outputs.gradle }}-bin.zip" -o "$TMP/gradle.zip"
          unzip -q "$TMP/gradle.zip" -d "$TMP"
          "$TMP/gradle-${{ steps.pick.outputs.gradle }}/bin/gradle" wrapper --gradle-version "${{ steps.pick.outputs.gradle }}"
          chmod +x ./gradlew
          echo "gradlew=./gradlew" >> "$GITHUB_OUTPUT"

      - name: Detect SDK/NDK requirements and install
        shell: bash
        working-directory: ${{ steps.root.outputs.dir }}
        run: |
          set -euo pipefail
          # compileSdk
          CS=$(grep -Rho --include=\*gradle\* -E 'compileSdk\s*=\s*[0-9]+' . | sed -E 's/.*=\s*([0-9]+).*/\1/' | head -n1 || true)
          [[ -n "$CS" ]] || CS=$(grep -Rho --include=\*gradle\* -E 'compileSdkVersion\s+[0-9]+' . | sed -E 's/.*\s([0-9]+).*/\1/' | head -n1 || true)
          # buildTools
          BT=$(grep -Rho --include=\*gradle\* -E 'buildToolsVersion\s+["'\''][0-9.]+["'\'']' . | sed -E 's/.*"([0-9.]+)".*/\1/' | head -n1 || true)
          # ndkVersion
          NDK=$(grep -Rho --include=\*gradle\* -E 'ndkVersion\s+["'\''][0-9.]+["'\'']' . | sed -E 's/.*"([0-9.]+)".*/\1/' | head -n1 || true)

          PKGS=("platform-tools")
          if [[ -n "$CS" ]]; then PKGS+=("platforms;android-$CS"); else PKGS+=("platforms;android-34"); fi
          if [[ -n "$BT" ]]; then PKGS+=("build-tools;$BT"); else PKGS+=("build-tools;34.0.0"); fi
          if [[ -n "$NDK" ]]; then PKGS+=("ndk;$NDK"); fi
          echo "Installing: ${PKGS[*]}"
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --install "${PKGS[@]}"

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Build (capture full logs)
        working-directory: ${{ steps.root.outputs.dir }}
        shell: bash
        run: |
          set -euo pipefail
