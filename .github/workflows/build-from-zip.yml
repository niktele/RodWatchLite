name: Build from ZIP (LITE)

on:
  workflow_dispatch:
  push:
    paths:
      - 'RoadWatch_MapLibre_Lite.zip'
      - '.github/workflows/build-from-zip.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      - name: Unzip project
        run: unzip -o -q RoadWatch_MapLibre_Lite.zip -d src

      - name: Locate Gradle root (smart)
        id: proj
        shell: bash
        run: |
          set -euo pipefail
          # Traži prave root-ove: moraju imati settings.gradle(.kts)
          mapfile -t roots < <(find src -type f \( -name settings.gradle -o -name settings.gradle.kts \) -printf '%h\n' | sort -u)
          if (( ${#roots[@]} == 0 )); then
            echo "ZIP ne sadrži settings.gradle(.kts) → nije kompletan Gradle projekat." >&2
            echo "Napomena: ZIP mora biti napravljen iz KORENOG foldera projekta (gde su gradlew i settings.gradle)." >&2
            exit 1
          fi
          # Izaberi najplići path (najverovatniji root)
          pick=""; mindepth=9999
          for d in "${roots[@]}"; do
            depth=$(awk -F/ '{print NF}' <<< "$d")
            if (( depth < mindepth )); then mindepth=$depth; pick=$d; fi
          done
          # Ako postoji root koji ima i gradlew, daj mu prednost
          for d in "${roots[@]}"; do
            if [[ -f "$d/gradlew" ]]; then pick="$d"; break; fi
          done
          echo "dir=$pick" >> "$GITHUB_OUTPUT"
          echo "Project dir: $pick"
          [[ -f "$pick/gradlew" ]] && chmod +x "$pick/gradlew"

      - name: Detect compileSdk/buildTools
        id: android
        shell: bash
        working-directory: ${{ steps.proj.outputs.dir }}
        run: |
          set -euo pipefail
          CS=$(grep -Rho --include=build.gradle* -E "compileSdk\s*=\s*[0-9]+" . | sed -E 's/.*=\s*([0-9]+)/\1/' | head -n1 || true)
          [[ -z "$CS" ]] && CS=$(grep -Rho --include=build.gradle* -E "compileSdkVersion\s+[0-9]+" . | sed -E 's/.*\s([0-9]+)/\1/' | head -n1 || true)
          BT=$(grep -Rho --include=build.gradle* -E "buildToolsVersion\s+['\"][0-9.]+['\"]" . | sed -E "s/.*['\"]([0-9.]+)['\"].*/\1/" | head -n1 || true)
          [[ -z "$CS" ]] && CS=34
          [[ -z "$BT" ]] && BT=34.0.0
          echo "compileSdk=$CS" >> "$GITHUB_OUTPUT"
          echo "buildTools=$BT" >> "$GITHUB_OUTPUT"
          echo "compileSdk=$CS buildTools=$BT"

      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          SDKM="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          # Prihvati licence (ignoriši SIGPIPE warning)
          yes | "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null || true
          "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --install "platform-tools"
          "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --install "platforms;android-${{ steps.android.outputs.compileSdk }}"
          "$SDKM" --sdk_root="$ANDROID_SDK_ROOT" --install "build-tools;${{ steps.android.outputs.buildTools }}"

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Verify Gradle project
        shell: bash
        working-directory: ${{ steps.proj.outputs.dir }}
        run: |
